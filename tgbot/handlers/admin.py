from aiogram import Dispatcher
from aiogram.types import Message
from tgbot.keyboards.reply import main_menu
from tgbot.funcs.queue import *
from tgbot.funcs.photos import *
import logging
import os

logger = logging.getLogger(__name__)


async def admin_start(message: Message):
    from_id = message.from_user.id

    users = dict(users_read())
    if users.get(str(from_id)):
        name = users.get(str(from_id))["f_name"]
    else:
        name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω"
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {name}! üòé\n\n–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ üßë‚Äçüéì –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º ü§ñ\n\n–ö–æ–º–∞–Ω–¥—ã: /help", reply_markup=main_menu)
    logger.info(f"New user ID{from_id} start - admin")


async def admin_help(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n" +
        "/users (—Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)\n" +\
        "/users_add (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n\
            \t1. ID –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ\n\
            \t2. –§–∞–º–∏–ª–∏—è\n\
            \t3. –ò–º—è\n\
            \t4. –°—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, student))\n" +\
        "/users_del (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 1 –ø–∞—Ä–∞–º–µ—Ç—Ä:\n\
            \t-> –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n" +\
        "/subjects (—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤)\n" +\
        "/queue (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å)\n" +\
        "/queue_del (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, 1 –ø–∞—Ä–∞–º–µ—Ç—Ä:\n\
            \t-> –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–ª–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)\n" +\
        "/queue_watch (–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º, 1 –ø–∞—Ä–∞–º–µ—Ç—Ä:\n\
            \t-> –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–ª–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)")


async def admin_cmds(message: Message):
    words = list(map(str, message.text.split()))
    cmd = words[0].replace("/", "")

    if cmd == "users":
        users = users_read()
        msg = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"

        for ind, user in enumerate(users):
            msg += "{}. {} {}: \n{}({})\n".format(ind + 1, users[user]['l_name'],\
                users[user]['f_name'], user,users[user]['status'])

        await message.answer(msg)
    elif cmd == "users_add":
        msg = ""
        users = users_read()

        if len(words) > 1 and words[1] in users:
            msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        if not msg and len(words) == 5 and words[1].isdigit() and int(words[1]) != 0:
            user = {"l_name": words[2], \
                "f_name": words[3], \
                "status": words[4]}
            users[words[1]] = user

            with open("./users_data/users_data.json", "w", encoding="utf-8") as file:
                json.dump(users, file, indent=4, ensure_ascii=False)

            msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        elif not msg:
            msg = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."

        await message.answer(msg)
    elif cmd == "users_del":
        msg = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

        if len(words) == 2 and words[1].isdigit() and int(words[1]) != 0:
            index_del = int(words[1]) - 1
            users = users_read()

            if (index_del >= len(users)):
                msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            else:
                users.pop(list(users)[index_del])

                with open("./users_data/users_data.json", "w", encoding="utf-8") as file:
                    json.dump(users, file, indent=4, ensure_ascii=False)

                msg = "–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

        await message.answer(msg)
    elif cmd == "subjects":
        subjects = subjects_read()
        msg = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n"

        for ind, subject in enumerate(subjects):
            msg += "{}. {}: {}\n".format(ind + 1, subject, subjects[subject])

        await message.answer(msg)
    elif cmd == "queue":
        msg = "–ü–æ–ª–Ω–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
        full_queue = queue_msg(None, None)

        if not full_queue:
            full_queue = "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."

        msg += full_queue

        await message.answer(msg)
    elif cmd == "queue_del":
        msg = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

        if len(words) == 2 and words[1].isdigit() and int(words[1]) != 0:
            index_del = int(words[1]) - 1
            queue_req = queue_read()

            if (index_del >= len(queue_req)):
                msg = "–ü–æ–∑–∏—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            else:
                queue_del(queue_req[index_del][0], queue_req[index_del][1], queue_req[index_del][2])
                os.remove(photo_name(queue_req[index_del][0], queue_req[index_del][1], queue_req[index_del][3]))

                msg = "–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."

        await message.answer(msg)
    elif cmd == "queue_watch":
        msg = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"

        if len(words) == 2 and words[1].isdigit() and int(words[1]) != 0:
            index_del = int(words[1]) - 1
            queue_req = queue_read()

            if (index_del >= len(queue_req)):
                msg = "–ü–æ–∑–∏—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                await message.answer(msg)
            else:
                name = photo_name(queue_req[index_del][0], queue_req[index_del][1], queue_req[index_del][3])
                msg = list(map(str, queue_msg(None, None).split("\n")))[index_del]

                await message.answer_photo(open(name, 'rb'), caption=msg)
        else:
            await message.answer(msg)


def register_admin(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=[
                                "start"], state="*", is_admin=True)
    dp.register_message_handler(admin_help, commands=[
                                "help"], state="*", is_admin=True)
    dp.register_message_handler(admin_cmds, commands=[
                                "users", "users_add", "users_del", "subjects", "queue",
                                "queue_del", "queue_watch"], state="*", is_admin=True)
